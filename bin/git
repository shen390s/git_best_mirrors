#! /bin/sh
# -*- mode:shell-script

if [ "x$DEBUG" = "xyes" ]; then
    set -x
fi

# MY_NAME=`realpath "$0"`
# MY_DIR=`dirname "$MY_NAME"`
GIT_BEST_MIRRORS=$HOME/.git_best_mirrors
GIT_BEST_LOG=/tmp/git.best.log

# BEST_MIRROR_GITHUB=hub.fastgit.org
GITHUB_MIRRORS="ghproxy.com gitclone.com github.com"
GITHUB_CHECK_REPO="shen390s/git_best_mirrors.git"

if [ -f $GIT_BEST_MIRRORS ]; then
    source $GIT_BEST_MIRRORS
fi

find_real_path() {
    local _real_path

    if [ ! -z "$REAL_PATH" ]; then
        echo $REAL_PATH
        return
    fi

    _real_path=$(which realpath)
    if [ ! -z "$_real_path" ]; then
        :
    else
        _real_path=$(which grealpath)
    fi

    if [ ! -z "$_real_path"  ]; then
        export REAL_PATH="$_real_path"
        echo $REAL_PATH
    fi
}

exec_cmd() {
    local _cmd

    _cmd="$1"

    echo "PWD: $(pwd)" >>$GIT_BEST_LOG
    echo "$(date) $_cmd" >>$GIT_BEST_LOG
    eval "$_cmd" 
}

REAL_PATH=$(find_real_path)
MY_NAME=$(eval "$REAL_PATH $0")
MY_DIR=`dirname "$MY_NAME"`

check_git() {
    local _git _f

    _git="$1"

    [ ! -x "$_git" ] && \
	    return 1
    
    _f=$($REAL_PATH "$_git")

    [ "X$_f" = "X$MY_NAME" ] && \
	    return 1

    [ -x "$_f" ] && \
	    return

    false
}

find_real_git() {
    local _d _dirs

    _dirs="$PATH"

    if [ ! -z "$REAL_GIT" ]; then
        echo "$REAL_GIT"
    fi
    
    while [ ! -z "$_dirs" ]; do
	    _d=`echo "$_dirs" | awk -F: '{print $1}'`

	    if check_git "$_d/git"; then
	        echo "$_d/git"
                export REAL_GIT="$_d/git"
	        return
	    fi

	    if [ "X$_d" = "X$_dirs" ]; then
	        break
	    fi

	    _dirs=`echo "$_dirs" |sed -e 's/^[^:]*://'`
    done

    echo
}

time_it() {
    local _b _a _s

    _b=`date "+%s"`
    if eval "$@"; then
	_a=`date "+%s"`
	echo `expr $_a - $_b`
	true
    else
	_a=`date "+%s"`
	echo `expr $_a - $_b`
	false
    fi
}

upcase() {
    tr [:lower:] [:upper:]
}

save_pwd() {
    _PWD=`pwd`
}

restore_pwd() {
    [ ! -z "$_PWD" ] && \
	cd "$_PWD"
}

git_protocol() {
    local _url _proto

    _url="$1"
    _proto=$(echo "$_url" |awk -F: '{print $1}')
    case "$_proto" in
        http*)
            echo $_proto
            ;;
        git@*)
            echo git
            ;;
        *)
            echo unknown
            ;; 
    esac
}

git_host() {
    local _url _proto _host 

    _url="$1"
    _proto=$(git_protocol "$_url")

    case "$_proto" in
       http*)
            _host=$(echo "$_url" |awk -F// '{print $2}' |awk -F/ '{print $1}')
            ;;
        git)
            _host=$(echo "$_url" |awk -F@ '{print $2}' |awk -F: '{print $1}')
            ;;
        *)
            _host=''
            ;;
    esac
    echo "$_host"
}

git_repo() {
    local _url _proto _repo

    _url="$1"
    _proto=$(git_protocol "$_url")

    case "$_proto" in
        http*)
            _repo=$(echo "$_url"|awk -F// '{print $2}' |sed -e 's/^[^\/]*\///g')
            ;;
        git)
            _repo=$(echo "$_url" |awk -F@ '{print $2}' |awk -F: '{print $2}')
            ;;
        *)
            _repo=''
            ;;   
    esac
    echo "$_repo"
}

save_best_mirror() {
    local _site _best _key

    _site=`echo "$1" | upcase`
    _best="$2"
    _key=`printf 'BEST_MIRROR_%s' "$_site"`

    touch $GIT_BEST_MIRRORS
    
    if cat $GIT_BEST_MIRRORS | grep "$_key=" 2>&1 >/dev/null; then
	mv $GIT_BEST_MIRRORS $GIT_BEST_MIRRORS.tmp
	cat $GIT_BEST_MIRRORS.tmp | \
	    grep -v "$_key=" >$GIT_BEST_MIRRORS
	rm -Rf $GIT_BEST_MIRRORS.tmp
    fi

    echo "$_key=$_best" >>$GIT_BEST_MIRRORS 
}

mk_mirror_url() {
    local _m _repo _url

    _m="$1"
    _repo="$2"

    case "$_m" in
        gitclone.com)
           _url=$(printf 'https://gitclone.com/github.com/%s' $_repo)
           ;;
        ghproxy.com)
           _url=$(printf 'https://ghproxy.com/https://github.com/%s' $_repo)
           ;;
        *)
           _url=$(printf 'https://%s/%s' "$_m" "$_repo")
           ;;
    esac

    echo "$_url"
}

check_for_best_mirror() {
    local _mirrors _repos _site _v _m _dir _best _best_time _time _real_git 
    
    _real_git=`find_real_git`

    _site=`echo "$1" | upcase`
    _v=`printf '$%s_MIRRORS' "$_site"`
    _v="echo $_v"
    _mirrors=`eval "$_v"`
    _v=`printf '$%s_CHECK_REPO' "$_site"`
    _v="echo $_v"
    _repos=`eval "$_v"`

    _dir=`mktemp -d /tmp/check_git.XXXXX`
    _best=
    _best_time=0

    save_pwd

    echo check mirrors: "$_mirrors" to find best mirror for site $_site
    
    cd $_dir
    for _m in $_mirrors; do
	echo
	echo trying mirror: $_m
	_time=$(time_it $_real_git clone $(mk_mirror_url "$_m" "$_repos"))
	if [ $? -eq 0 ]; then
	    echo try mirror: $_m access time $_time seconds
	    if [ ! -z "$_best" -a $_best_time -lt $_time ];then
		:
	    else
		_best="$_m"
		_best_time="$_time"
	    fi
	else
	    echo try mirror: $_m failed
	fi
	rm -Rf $_dir/* 
    done

    echo
    echo best mirror: $_best access time: $_best_time
    
    restore_pwd
    
    rm -Rf $_dir
    save_best_mirror "$_site" "$_best"
    
    _v=`printf 'BEST_MIRROR_%s=%s' "$_site" "$_best"`
    eval "$_v"
}

get_best_mirror() {
    local _host

    _host="$1"
    case "$_host" in
	    *github.com)
	        if [ -z "$BEST_MIRROR_GITHUB" ]; then
		        echo $_host
	        else    
		        echo $BEST_MIRROR_GITHUB
	        fi
	        ;;
	    *)
	        echo "$_host"
            ;;
    esac
}

get_mirror_url() {
    local _url _proto _host _repo 

    _url="$1"
    _proto=$(git_protocol "$_url")
    _host=$(git_host "$_url")
    _repo=$(git_repo "$_url")

    _m=$(get_best_mirror "$_host")
    
    if [ "x$_m" = "x$_host" ]; then
        echo "$_url"
        return 
    fi

    mk_mirror_url "$_m" "$_repo"  
}

git_command() {
    local _c _cmd

    echo git_command: "$@" >>$GIT_BEST_LOG
    _cmd=""
    while [ $# -gt 0 ]; do
        _c="$1"

        case "$_c" in
            -C|-c|--origin)
                shift 2
                ;;
            -*)
                shift
                ;;
            clone)
                echo clone
                return
                ;;
            *)
                if [ ! -z "$_cmd" ]; then
                    _cmd="$_cmd-$_c"
                else
                    _cmd="$_c"
                fi
                shift
                ;;
        esac
    done

    echo git_command: $_cmd >>$GIT_BEST_LOG
    echo  "$_cmd"
}

run_git_clone() {
    local _c _url _dir _rg 

    _rg="$(find_real_git) "
    _c="$_rg "
    _url=""
    echo run_git_clone: $_rg "$@" >>$GIT_BEST_LOG

    while [ $# -gt 0 ]; do 
        case "$1" in
            -C|-c|--origin)
                _c="$_c $1 $2"
                shift 2
                ;;
            -*)
                _c="$_c $1"
                shift 
                ;;
            clone)
                _c="$_c clone"
                shift 
                ;;
            *)
                if [ -z "$_url" ]; then
                    _url="$1"
                    _c="$_c $(get_mirror_url $_url)"
                else
                    _dir="$1"
                    _c="$_c $_dir"
                fi
                shift
                ;;
        esac
    done 

    if [ ! -z "$_c" ]; then
        if [ ! -z "$_dir" ]; then
            :
        else 
            _dir=$(echo $_url |awk -F/ '{print $NF}' | sed -e 's/\.git//g')
        fi 
        exec_cmd "$_c"

        if [ "x$?" = "x0" ]; then
            cd $_dir && exec_cmd "$_rg config --replace-all remote.origin.url $_url"
        else
            rm -Rf $_dir
        fi
    fi  
}

run_git_ls_remote() {
    local _c _url _rg

    _rg=$(find_real_git)
    _c="$_rg"
    _url=""

    echo run_git_ls_remote: $_rg "$@" >>$GIT_BEST_LOG

    while [ $# -gt 0 ]; do
        case "$1" in
            https*)
                _url=$(get_mirror_url $1)
                _c="$_c $_url"
                shift
                ;;
            *)
                _c="$_c $1"
                shift
                ;;
        esac
    done

    eval "$_c"
}

with_best_mirror() {
    local _url _url_best _rg _status

    _rg=$(find_real_git)

    echo with_best_mirror: $_rg "$@" >>$GIT_BEST_LOG

    _url=$($_rg config --get remote.origin.url)

    if [ -z "$_url" ]; then
        $_rg "$@"
        return
    fi

    _url_best=$(get_mirror_url $_url)
    if [ -z "$_url_best" -o "x$_url" = "x$_url_best" ]; then
        $_rg "$@"
        return
    fi

    exec_cmd "$_rg config --replace-all remote.origin.url $_url_best"
    echo with_best_mirror: $_rg "$@" >>$GIT_BEST_LOG
    
    $_rg "$@"
    _status=$?
    echo "status: $_status" >>$GIT_BEST_LOG

    exec_cmd "$_rg config --replace-all remote.origin.url $_url"

    return $_status
}

if [ -z "$BEST_MIRROR_GITHUB" ]; then
    check_for_best_mirror "github"
fi

echo "$(date) command: git $@" >>$GIT_BEST_LOG

_c=$(git_command "$@")
case "$_c" in
    clone)
        _cnt=0  
        while [ $_cnt -lt 10 ]; do
            if run_git_clone "$@"; then
                exit $?
            fi
            sleep 10
            _cnt=$(expr $_cnt + 1)
        done
        exit 1
        ;;
    ls-remote-*)
        run_git_ls_remote "$@"
        ;;
    config*|reset*|init*|push*)
        _rg=$(find_real_git)
        echo direct git: $_rg "$@" >>$GIT_BEST_LOG
        $_rg "$@" 
        exit $?
        ;;
    *)
        with_best_mirror "$@"
        ;;
esac
